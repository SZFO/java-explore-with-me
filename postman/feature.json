{
	"info": {
		"_postman_id": "b50895ed-a063-409a-89a5-28f1cc1ab22e",
		"name": "\"Explore with me\" API Rating",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Получение событий с возможностью фильтрации по рейтингу",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"\r",
							"        const initiator1 = await api.addUser(rnd.getUser());\r",
							"        const initiator2 = await api.addUser(rnd.getUser());\r",
							"\r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        const user3 = await api.addUser(rnd.getUser());\r",
							"        const user4 = await api.addUser(rnd.getUser());\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        let eventBody1 = rnd.getEvent(category.id);\r",
							"        let eventBody2 = rnd.getEvent(category.id);\r",
							"\r",
							"        eventBody1['requestModeration'] = false\r",
							"        eventBody2['requestModeration'] = false\r",
							"        eventBody1['paid'] = true\r",
							"        eventBody2['paid'] = true\r",
							"\r",
							"        let event1 = await api.addEvent(initiator1.id, eventBody1);\r",
							"        let event2 = await api.addEvent(initiator2.id, eventBody2);\r",
							"\r",
							"        event1 = await api.publishEvent(event1.id);\r",
							"        event2 = await api.publishEvent(event2.id);\r",
							"\r",
							"        const requestToJoin1 = await api.publishParticipationRequest(event1.id, user1.id);\r",
							"        const requestToJoin2 = await api.publishParticipationRequest(event1.id, user2.id);\r",
							"        const requestToJoin3 = await api.publishParticipationRequest(event1.id, user3.id);\r",
							"\r",
							"        const requestToJoin4 = await api.publishParticipationRequest(event2.id, user1.id);\r",
							"        const requestToJoin5 = await api.publishParticipationRequest(event2.id, user2.id);\r",
							"        const requestToJoin6 = await api.publishParticipationRequest(event2.id, user3.id);\r",
							"        const requestToJoin7 = await api.publishParticipationRequest(event2.id, user4.id);\r",
							"\r",
							"        const reactionPostitive = 'LIKE';\r",
							"        const reactionNegative = 'DISLIKE';\r",
							"\r",
							"        await api.addLike(user1.id, event1.id, reactionPostitive);\r",
							"        await api.addLike(user2.id, event1.id, reactionNegative);\r",
							"        await api.addLike(user3.id, event1.id, reactionPostitive);\r",
							"  \r",
							"        await api.addLike(user1.id, event2.id, reactionNegative);\r",
							"        await api.addLike(user2.id, event2.id, reactionNegative);\r",
							"        await api.addLike(user3.id, event2.id, reactionNegative);\r",
							"        await api.addLike(user4.id, event2.id, reactionPostitive);\r",
							"\r",
							"        pm.request.removeQueryParams(['text', 'categories', 'paid']);\r",
							"        pm.request.addQueryParams(['categories=' + category.id, 'paid=' + event1.paid]);\r",
							"        pm.collectionVariables.set('reactionPostivite', reactionPostivite);\r",
							"        pm.collectionVariables.set('reactionNegative', reactionNegative);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"eventId1 = pm.collectionVariables.get('eid1');\r",
							"eventId2 = pm.collectionVariables.get('eid2');\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target1 = pm.response.json()[0];\r",
							"const target2 = pm.response.json()[1];\r",
							"const ratingEvent1 = 6.67;\r",
							"const ratingEvent2 = 2.5;\r",
							"\r",
							"pm.test(\"Событие №1 должно содержать поля: likes, disLikes, rating\", function () {\r",
							"pm.expect(target1).to.have.property('likes');\r",
							"pm.expect(target1).to.have.property('disLikes');\r",
							"pm.expect(target1).to.have.property('rating');\r",
							"});\r",
							"\r",
							"pm.test(\"Событие №2 должно содержать поля: likes, disLikes, rating\", function () {\r",
							"pm.expect(target2).to.have.property('likes');\r",
							"pm.expect(target2).to.have.property('disLikes');\r",
							"pm.expect(target2).to.have.property('rating');\r",
							"});\r",
							"\r",
							"pm.test(\"Событие №1 должно иметь рейтинг: \" + ratingEvent1, function () {\r",
							"pm.expect(ratingEvent1).equal(target1.rating);\r",
							"});\r",
							"\r",
							"pm.test(\"Событие №2 должно иметь рейтинг: \" + ratingEvent2, function () {\r",
							"pm.expect(ratingEvent2).equal(target2.rating);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/events?text=0&categories=0&paid=true&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&onlyAvailable=false&sort=RATING&from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					],
					"query": [
						{
							"key": "text",
							"value": "0"
						},
						{
							"key": "categories",
							"value": "0"
						},
						{
							"key": "paid",
							"value": "true"
						},
						{
							"key": "rangeStart",
							"value": "2022-01-06%2013%3A30%3A38"
						},
						{
							"key": "rangeEnd",
							"value": "2097-09-06%2013%3A30%3A38"
						},
						{
							"key": "onlyAvailable",
							"value": "false"
						},
						{
							"key": "sort",
							"value": "RATING"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						}
					]
				},
				"description": "Обратите внимание:"
			},
			"response": []
		},
		{
			"name": "Удалить LIKE с события",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = false\r",
							"        let event = await api.addEvent(initiator.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"        \r",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, user.id);\r",
							"        const reaction = 'LIKE';\r",
							"        await api.addLike(user.id, event.id, reaction);\r",
							"\r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"        \r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"});\r",
							"\r",
							"eventId = pm.collectionVariables.get('eid');\r",
							"userId = pm.collectionVariables.get('uid');\r",
							"const reactionValue = 'LIKE';\r",
							"source = pm.collectionVariables.get('response');\r",
							"\r",
							"pm.sendRequest({\r",
							"            url: pm.collectionVariables.get(\"baseUrl\") + \"/events/\" + eventId,\r",
							"            method: 'GET',\r",
							"        }, (error, response) => {\r",
							"            pm.test(\"Событие найдено после удаления эмоции: \" + reactionValue, function () {\r",
							"                pm.expect(response.code).to.eql(200);\r",
							"            });\r",
							"            var data = response.json();\r",
							"            var userRate = 0; \r",
							"            console.log(userRate)\r",
							"            pm.test(\"Рейтинг мероприятия после удаления \" + reactionValue + \" должен соответствовать: \" + userRate, function(){\r",
							"                console.log(response.json().initiator);\r",
							"                pm.expect(data.initiator.rating).equal(userRate);\r",
							"\r",
							"            });\r",
							"        });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/reactions",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"reactions"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "{{eid}}",
							"description": "(Required) EventId"
						}
					]
				},
				"description": "Обратите внимание:"
			},
			"response": []
		},
		{
			"name": "Добавить реакцию на событие",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const initiator = await api.addUser(rnd.getUser());",
							"        const user = await api.addUser(rnd.getUser());",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = false",
							"        let event = await api.addEvent(initiator.id, eventBody);",
							"        event = await api.publishEvent(event.id);",
							"        ",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, user.id);",
							"",
							"        var Reactions = ['LIKE','DISLIKE'];",
							"        const reaction = Reactions[Math.floor(Math.random() * Reactions.length)];",
							"",
							"        pm.request.removeQueryParams(['reaction']);",
							"        pm.request.addQueryParams([`reaction=` + reaction]);",
							"        pm.collectionVariables.set('uid', user.id);",
							"        pm.collectionVariables.set('eid', event.id);",
							"        pm.collectionVariables.set('reaction', reaction);",
							"",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            // выполняем наш скрипт",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"const eventId = pm.collectionVariables.get('eid');",
							"const userId = pm.collectionVariables.get('uid');",
							"const stateReaction = pm.collectionVariables.get('reaction');",
							"",
							"pm.test(\"Запрос на реакцию на событие должен содержать поля: id, eventId, userId, stateReaction\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('eventId');",
							"pm.expect(target).to.have.property('userId');",
							"pm.expect(target).to.have.property('stateReaction');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(userId).equal(target.userId, 'Пользователь, запрашивающий добавление реакции на событие должен соответствовать пользователю, отправившему запрос на добавление реакции на событие.');",
							"    pm.expect(eventId).equal(target.eventId, 'Событие, запрос на участие в котором надо подтвердить, должно соответствовать событию указанного пользователя');",
							"    pm.expect(stateReaction).equal(target.stateReaction, 'Время создания запроса на участие в событии после подтверждения должно соответствовать времени создания запроса на участие в событии указанного пользователя до подтверждения');",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/reactions?reaction=LIKE",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"reactions"
					],
					"query": [
						{
							"key": "reaction",
							"value": "LIKE"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addLike(userId, eventId, reactionValue, verbose=null) {",
					"         return this.post('/users/' + userId + '/events/' + eventId + '/reactions?reaction=' + reactionValue, \"Ошибка при добавлении новой реакции\", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId + '/publish', \"Ошибка при публикации события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/' + reqId + '/confirm', \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if(body!=null){",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: pm.variables.replaceIn('{{$randomInt}}'),",
					"                lon: pm.variables.replaceIn('{{$randomInt}}'),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "uid",
			"value": "1"
		},
		{
			"key": "reactionValue",
			"value": "LIKE",
			"type": "string"
		},
		{
			"key": "eid",
			"value": "1"
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "reaction",
			"value": "LIKE"
		},
		{
			"key": "emoji",
			"value": ""
		},
		{
			"key": "eid1",
			"value": ""
		},
		{
			"key": "eid2",
			"value": ""
		},
		{
			"key": "response1",
			"value": ""
		},
		{
			"key": "reactionPostivite",
			"value": ""
		},
		{
			"key": "reactionNegative",
			"value": ""
		}
	]
}